/*

*******************
****Iniciar Git****
*******************

git int

*******************
****Iniciar Git****
*******************

**********************************
*******Configuración de Git*******
**********************************

git config
git config --list
git config --list --show origin
git config --list --show-origin
git config --global
git config --global user.name "SC"
git config --global user.email "noseque@hotmail.com"

**********************************
*******Configuración de Git*******
**********************************

********************************************
******Agragar a la zona de preparación******
********************************************

git add Archivo.txt

git add .

********************************************
******Agragar a la zona de preparación******
********************************************

****************************
*********Ver estado*********
****************************

git status

****************************
*********Ver estado*********
****************************

***************************************************************************
*****************Quitar de la zona de preparación**************************
***************************************************************************

git rm --cached archivo.txt (Quitar de la zona de preparación).

***************************************************************************
*****************Quitar de la zona de preparación**************************
***************************************************************************

************************************************************
**********************Realizar commint**********************
************************************************************

git commit -m "Este es el pimer commit de este archivo"
git commit -am "Este es el pimer commit de este archivo"

************************************************************
**********************Realizar commint**********************
************************************************************

*****************************************************
*******Ver el historial de cambios del archivo*******
*****************************************************

git log
git log Archivo.txt

*****************************************************
*******Ver el historial de cambios del archivo*******
*****************************************************

***************************************************************
************Muestra todos los cambios sobre un archivo*********
***************************************************************

git show Archivo.txt

***************************************************************
************Muestra todos los cambios sobre un archivo*********
***************************************************************

**************************************
**********Comparar versiones**********
**************************************

git diff commint commint

**************************************
**********Comparar versiones**********
**************************************

*****************************************************************************
************************Volver a una versión anterior************************
*****************************************************************************

git reset commit --hard (borramos todos los cambios y lo que tengamos en staging)

git reset commit --soft (soft conservamos cambios y lo que tengamos en staging)

git checkout (commit) Archivo.txt

git checkout (rama) Archivo.txt
*****************************************************************************
************************Volver a una versión anterior************************
*****************************************************************************

****************************************************************************
**************************Ver Cambio en bytes*******************************
****************************************************************************

git log --stat(Cambio en bytes)

****************************************************************************
**************************Ver Cambio en bytes*******************************
****************************************************************************

***************************************************************************
****************************Crear una rama*********************************
***************************************************************************

git branch (branchName)

***************************************************************************
****************************Crear una rama*********************************
***************************************************************************


***************************************************************************
**************************Cambiar de rama**********************************
***************************************************************************

git checkout (branchName)

***************************************************************************
**************************Cambiar de rama**********************************
***************************************************************************

*******************************************************************
************************Merge entre branchs************************
*******************************************************************

git merge (branchName)

**Estar en la rama master o en la que se quiere dejar el <Head>**
*******************************************************************
************************Merge entre branchs************************
*******************************************************************

****************************************************
************Traer un repositorio externo************
****************************************************

git remote add origin (url del HTTPS)
git remote (muestra el origen)
git remote -v(es verval)

git pull origin master --allow-unrelated-histories (Fuerza la union de las diferentes historias)

git pull origin master (Descarga cambios)

git push (origin) (master) (Sube Cambios)

  /////////////////////////////////Datos Fredi
  # Primero: Guardar la URL del repositorio de GitHub
  # con el nombre de origin
  git remote add origin URL

  # Segundo: Verificar que la URL se haya guardado
  # correctamente:
  git remote
  git remote -v

  # Tercero: Traer la versión del repositorio remoto y
  # hacer merge para crear un commit con los archivos
  # de ambas partes. Podemos usar git fetch y git merge
  # o solo el git pull con el flag --allow-unrelated-histories:
  git pull origin master --allow-unrelated-histories

  # Por último, ahora sí podemos hacer git push para guardar
  # los cambios de nuestro repositorio local en GitHub:
  git push origin master
  /////////////////////////////////Datos Fredi

****************************************************
************Configura tus llaves SSH en local*******
****************************************************

Primer paso: Generar tus llaves SSH. Recuerda que es muy buena idea proteger tu llave privada con una contraseña.

 ssh-keygen -t rsa -b 4096 -C "tu@email.com"

Segundo paso: Terminar de configurar nuestro sistema.

  En Windows y Linux:

    # Encender el "servidor" de llaves SSH de tu computadora:
    eval $(ssh-agent -s)

    # Añadir tu llave SSH a este "servidor":
    ssh-add ruta-donde-guardaste-tu-llave-privada


  En Mac:

  # Encender el "servidor" de llaves SSH de tu computadora:
  eval "$(ssh-agent -s)"

  # Si usas una versión de OSX superior a Mac Sierra (v10.12)
  # debes crear o modificar un archivo "config" en la carpeta
  # de tu usuario con el siguiente contenido (ten cuidado con
  # las mayúsculas):
  Host *
          AddKeysToAgent yes
          UseKeychain yes
          IdentityFile ruta-donde-guardaste-tu-llave-privada

  # Añadir tu llave SSH al "servidor" de llaves SSH de tu
  # computadora (en caso de error puedes ejecutar este
  # mismo comando pero sin el argumento -K):
  ssh-add -K ruta-donde-guardaste-tu-llave-privada

****************************************************
************Configura tus llaves SSH en local*******
****************************************************

****************************************************
*****Cambiar a SSH para conectrarnos con GitHub*****
****************************************************

git remote set-url origin url-ssh-del-repositorio-en-github

****************************************************
*****Cambiar a SSH para conectrarnos con GitHub*****
****************************************************

****************************************************
************Para Agregar un alias o tag*************
****************************************************

Para Crear un alias
alias  (NombreQueTendra)="(El comando que va a tener el alias)"
Ejemplo: alias arbolito="git log --all --graph --decorate --oneline"

Pra poder ver el flujo con ayuda visual:  $ git log--all --graph


Para Crear un tag

  git tag -a (NombreDelTag) -m "(Mensaje o descripcion)" (El numero del comit que tomara)
  Ejemplo: git tag -a v0.1 -m "Resultado de las primeras clases del curso" b71de49

Para ver todos los Tags que hay

  git tag

Para Saver que comit esta conectado a cada tag

  git show-ref --tags

Para borar un Tags de manera local

  git tag -d (NombreDelTagAEliminar)
  Ejemplo: git tag -d dormido

Para Borrar un Tags de github

  git push origin :refs/tags/(NombreDelTagAEliminar)
  Ejemplo: git push origin :refs/tags/dormido

****************************************************
************Para Agregar un alias o tag*************
****************************************************

************************
********ramas***********
************************

git show-branch --all (¿Cuales branch existen y sus historias)
gitk (igual que la anterior per con gui)
git push origin :[nombre_branch] (Elimina rama remota)


************************
********ramas***********
************************

************************
***Crear fuente nueva***
************************

git remote add upstream (url-github)
git pull upstream master (trae todos los cabios de master del origen upstream)

************************
***Crear fuente nueva***
************************

************************
*****Usando Rebase******
************************

rebase reescribe la historia del repositorio, cambia la historia de donde comenzó la rama y solo debe ser usado de manera local.

git rebase (rama)

************************
*****Usando Rebase******
************************

****************************************************************
**Git Stash: Guardar cambios en memoria y recuperarlos después**
****************************************************************

Para guardar los cambios temporalmente se usar
  git stash

Para ver los cambios guardados con stash
  git stash list

Para mandar los cambios guardados en stash a una nueva ramas
  git stash branch english-version

Para borrar los cambios guardados en stash
  git stash drop

El Git Stash guarda los cambios sin hacer un commit, y te regresa al ultimo commit

Para poner un mensaje para  identificar un stash
  git stash save"aqui va un mensaje para identificar el stash"

De igual manera para llamar a un stash en particular y aplicarlo
  git stash apply stash@{numero del stash}
  El numero del stash lo podemos ver en la lista de stash

****************************************************************
**Git Stash: Guardar cambios en memoria y recuperarlos después**
****************************************************************

******************************************************
******LIMPIAR ARCHIVOS NO DESEADOS CON GIT CLEAN******
******************************************************

Para saber que va a eliminar el git clean
  git clean --dry-run

Para borar la lista de archivos o archivo
  git clean -f

Solo va a borrar los archivos que no esten ignorados por el gitignore
******************************************************
******LIMPIAR ARCHIVOS NO DESEADOS CON GIT CLEAN******
******************************************************

*******************************************************************
***Git cherry-pick: Traer commits viejos al head de un branch******
*******************************************************************

Trae viejos commits a una rama
  git cherry-pick (commit)

Existe un mundo alternativo en el cual vamos avanzando en una rama pero necesitamos en master uno de esos avances de la rama, para eso utilizamos el comando git cherry-pick IDCommit.

cherry-pick es una mala práctica porque significa que estamos reconstruyendo la historia, usa cherry-pick con sabiduría. Si no sabes lo que estás haciendo ten mucho cuidado.

*******************************************************************
***Git cherry-pick: Traer commits viejos al head de un branch******
*******************************************************************

********************************************
****Reconstruír commits en Git con amend****
********************************************

git commit --amend (coloca los cambios en el útimo commit realizado)

Pero para que funcione hay que agrgarlo con "git add (archivo)"

********************************************
****Reconstruír commits en Git con amend****
********************************************

*******************************************************************************
****************Git Reset y Reflog: Úsese en caso de emergencia****************
*******************************************************************************

git reflog (Permite ver el log completo)

git reset HEAD@{2}

git RESET --hard 9ea6558

*******************************************************************************
****************Git Reset y Reflog: Úsese en caso de emergencia****************
*******************************************************************************

**************************************************************************
************Buscar en archivos y commits de Git con Grep y log************
**************************************************************************

git grep -n color (lugares donde uso la palabra color)

git grep -c color (cuanteas veces esta la palabra color)

$ git log -S "Cabecera" (Busca en los commits la palabra cabecera)


**************************************************************************
************Buscar en archivos y commits de Git con Grep y log************
**************************************************************************

*/

body {
    background-color: black;
    color: black;
    text-align: center;
    font-family: Arial;
    font-size: 16px;

    margin: 0;
    padding: 0;
}

img {
  max-width: 100%;
}

p {
  align-items: center;
}

.container-Image{
  height: 30px;
  width: 39px;
}
.container-Image2{
 align-items: center;
 text-align: center;
 max-width: 1000px;
 max-height: 1000px;
}



#container {
  background-color: white;

    width: 70%;
    padding: 0;
    text-align: left;
    border: 1px solid #ddd;
    margin: 0 auto;
}


#containerh1 {
    font-size: 20px;
}

#cabecera {
    background: #33A;
    box-shadow: 0px 2px 20px 0px rgba(0, 0, 0, .5);

    font-weight: bold;
    color: white;
    margin: 0;
    padding: 0.5em 0 0.5em 2em;
    display: flex;
}

#cabecera #tagline {
    margin: 16px;
    align-items: center;
    font-weight: normal;
    font-size: 0.8em;
}

#post {
    padding: 1em;
}

.footer{
  text-align: center;
  background-color: #33A;
  color: white;
  font-size: 20px;
  height: auto;
}
.footer p{
  padding: 8px 0 8px 0;

}
